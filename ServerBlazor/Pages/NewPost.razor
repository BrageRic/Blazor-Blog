@using ServerBlazor.Models
@using ServerBlazor.Models.Entities
@using System.Security.Claims
@inject IBlogRepository _repo
@inject IMySharedService MySharedService

<EditForm Model=@newPost OnValidSubmit=@OnSubmit>
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText @bind-Value=newPost.Title class="form-control" id="Title" />
    </div>
    <div class="form-group">
        <label for="Content">Content</label>
        <InputTextArea @bind-Value=newPost.Content class="form-control" id="Content" rows="10" />
    </div>
    <div class="form-group">
        <label for="Tags">Tags</label>
        <InputText @bind-Value=tags class="form-control" id="Tags" data-role="tagsinput" placeholder="Comma separated tags"/>
    </div>
    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>


@code {
    PostDTO newPost = new PostDTO();
    private string? tags { get; set; }
    [CascadingParameter(Name="Posts")]
    private IEnumerable<Post>? Posts { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationState;
        user = authState?.User;
    }

    async Task OnSubmit()
    {
        var blogId = _repo.BlogIdByUserId(user.Claims.FirstOrDefault().Value);
        List<Tag> tagList = new();

        if (!string.IsNullOrEmpty(tags))
        {
            foreach (var tag in tags.Trim().Split(','))
            {
                tagList.Add(new Tag() { TagText = tag.ToUpper() });
            }
        }

        var post = new Post()
        {
            Title = newPost.Title,
            Content = newPost.Content,
            BlogId = blogId
        };
        int postId = await _repo.CreatePost(post, user);
        await _repo.AddTagsToPost(postId, tagList);
        Posts = _repo.GetPostsByBlogId(blogId);
        MySharedService.RequestRefresh();
    }
}
