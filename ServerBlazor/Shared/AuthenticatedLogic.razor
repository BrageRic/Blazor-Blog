@using System.Text.Json
@using System.Text
@using static System.Net.Mime.MediaTypeNames
@inject ILocalStorageService _localStorage
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime


@if (loggedIn)
{
    <button @onclick="logOutUser"> Logout </button>
}
else
{
    <a href="/login">Login</a>
}


@code {
    private bool loggedIn = false;
    private bool hasRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            loggedIn = await isUserLoggedIn();
            StateHasChanged();  
        }
    }

    private async Task<string> getSavedToken()
    {
        var jwt = await _localStorage.GetItemAsStringAsync("token");
        return jwt.Trim('"');
    }

    private async Task<bool> isUserLoggedIn()
    {
        return (await _localStorage.ContainKeyAsync("token"));
    }

    private async Task logOutUser()
    {
        if (!hasRendered)
            return;
        if (!await isUserLoggedIn())
            return;
        var client = _clientFactory.CreateClient("ApiClient");
        string bearer = $"Bearer {await getSavedToken()}";
        await JSRuntime.InvokeVoidAsync("console.log", bearer);

        client.DefaultRequestHeaders.Add("Authorization", bearer);
        using var httpResponseMessage = await client.GetAsync("api/Account/logout");
        var responseContent = await httpResponseMessage.Content.ReadAsStringAsync();
        await JSRuntime.InvokeVoidAsync("console.log", $"Response Content: {responseContent}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Http Response: {httpResponseMessage}");

        if (httpResponseMessage.IsSuccessStatusCode)
        {
            await _localStorage.RemoveItemAsync("token");
            StateHasChanged();
            _navigationManager.NavigateTo("", true);
        }
    }
}
